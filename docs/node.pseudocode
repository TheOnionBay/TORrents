table relay
table up_file_transfer
table down_file_transfer
key rsa_priv_key

function handle_message(message):
	# If the message is a file to be transmitted to a bridge
	if "FSID" in message:
		bridge_ip, bridge_cid = up_file_transfer.lookup(FSID = message["FSID"])
		# Show error if lookup fails
		new_message = {
			"CID": bridge_cid,
			"payload": {
				"type": "file",
				"file": message["file"],
				"data": message["data"]
			}
		}
		send(new_message, bridge_ip)

	# If the message is received from a bridge, and to be transmitted down to the client
	else if message["CID"] in down_file_transfer.BridgeCID:
		down_cid = down_file_transfer.lookup(BridgeCID = message["CID"])
		down_ip, sess_key = relay.lookup(DownCID = down_cid)
		new_message = {
			"CID" : down_cid,
			"payload": aes_encrypt(message["payload"], sess_key)
		}
		send(new_message, down_ip)

	# If the message is a normal message from down to upstream
	else if message["CID"] in relay.DownCID:
		up_cid, up_ip, sess_key = relay.lookup(DownCID = message["CID"])
		new_message = {
			"CID": up_cid,
			"payload" : aes_decrypt(message["payload"], sess_key)
		}
		send(new_message, up_ip)

	# If the message is a response from up to downstream
	else if message["CID"] in relay.UpCID:
		down_cid, down_ip, sess_key = relay.lookup(UpCID = message["CID"])
		new_message = {
			"CID": down_cid,
			"payload": aes_encrypt(message["payload"], sess_key)
		}
		send(new_message, down_ip)

	# We don't know the CID of the message, we assume this is a tunnel creation
	else:
		# Decrypt the session key
		sess_key = rsa_decrypt(message["aes_key"], rsa_priv_key)
		# Decrypt the payload with the session key
		payload = aes_decrypt(message["payload"], sess_key)
		# Interpret the payload as a JSON object
		payload = string_to_json(payload)
		# Create a CID for the new upstream link
		up_cid = create_cid()
		# Add the tunnel data to the relay table
		relay.add(
			DownCID = message["CID"],
			DownIP = message.IP,
			sess_key = sess_key,
			UpCID = up_cid,
			UpIP = payload["to"]
		)
		# Forward the message to the next node
		new_message = {
			"CID": up_cid,
			"aes_key": payload["aes_key"],
			"payload": payload["relay"]
		}
		send(new_message, payload["to"])

def handle_control_message(message):
	# If we initiate a bridge
	if message["type"] == "make_bridge":
		up_file_transfer.add(
			BridgeCID = message["bridge_CID"],
		    BridgeIP = message["to"],
		    FSID = message["FSID"]
		)

	# If we are at the end of a new bridge
	else if message["type"] == "receive_bridge":
		down_cid = relay.lookup(UpCID = message["CID"])
		down_file_transfer.add(DownCID = down_cid, BridgeCID = message["bridge_CID"])
