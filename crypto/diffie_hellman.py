"""Usage:
    -Both sides use generate_key, keep secret and send public to each other
    -They then use get_key_from, with the public they received and their secret as parameters
    -A 256 bits AES key is returned
    Tada.
"""
from random import SystemRandom
from rsa import exp_mod

random_gen = SystemRandom()

g = 2
p = 32317006071311007300338913926423828248817941241140239112842009751400741706634354222619689417363569347117901737909704191754605873209195028853758986185622153212175412514901774520270235796078236248884246189477587641105928646099411723245426622522193230540919037680524235519125679715870117001058055877651038861847280257976054903569732561526167081339361799541336476559160368317896729073178384589680639671900977202194168647225871031411336429319536193471636533209717077448227988588565369208645296636077250268955505928362751121174096972998068410554359584866583291642136218231078990999448652468262416972035911852507045361090559


def generate_key():
    # secret = random_prime(512)
    secret = random_gen.randint(1, p-1)
    public = exp_mod(g, secret, p)
    return secret, public


def get_key_from(public, private):
    return exp_mod(public, private, p) % pow(2, 256)
